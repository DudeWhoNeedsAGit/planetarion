version: '3.8'

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: planetarion
      POSTGRES_USER: planetarion_user
      POSTGRES_PASSWORD: planetarion_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only for security
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U planetarion_user -d planetarion"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    # Resource limits for QNAP Celeron J3455
    deploy:
      resources:
        limits:
          cpus: '0.5'    # Half core for DB
          memory: 256M
        reservations:
          cpus: '0.2'
          memory: 128M
    # QNAP-specific logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: ./src
      dockerfile: ./backend/Dockerfile
      target: production
    environment:
      DATABASE_URL: postgresql://planetarion_user:planetarion_password@db:5432/planetarion
      FLASK_ENV: production
      FLASK_DEBUG: false
    ports:
      - "0.0.0.0:5000:5000"  # Bind to all interfaces
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro  # Read-only for security
    restart: unless-stopped
    # Resource limits for QNAP
    deploy:
      resources:
        limits:
          cpus: '1.0'    # 1 core for backend
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/api/planet', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_URL: http://backend:5000
    ports:
      - "0.0.0.0:3000:3000"  # Bind to all interfaces
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://backend:5000
    restart: unless-stopped
    # Resource limits for QNAP
    deploy:
      resources:
        limits:
          cpus: '0.5'    # Half core for frontend
          memory: 128M
        reservations:
          cpus: '0.2'
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /share/CACHEDEV1_DATA/Docker/postgres_data  # QNAP storage path
